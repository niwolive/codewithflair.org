<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Code With Flair</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://codewithflair.org/"/>
  <updated>2017-04-15T15:57:39.979Z</updated>
  <id>http://codewithflair.org/</id>
  
  <author>
    <name>Nicolas Wormser</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Practice 1 - An interactive board with React.js</title>
    <link href="http://codewithflair.org/Practice-1-An-interactive-board-with-React-js/"/>
    <id>http://codewithflair.org/Practice-1-An-interactive-board-with-React-js/</id>
    <published>2017-04-15T15:57:39.000Z</published>
    <updated>2017-04-15T15:57:39.979Z</updated>
    
    <content type="html"><![CDATA[<!-- FIXME - link «enhanced» to an article explaining my approach to teaching via CWF -->
<p><em>This post is enhanced for web development practice. You can solve a given problem directly in your browser through a selection of iterative tasks. Advice: Unless otherwise stated, attempt all tasks before expanding any of the solutions.</em></p>
<div class="summary">
<h4 id="practice-summary"><a class="header-anchor" href="#practice-summary">#</a>Practice summary</h4>
<ul>
<li><strong>Topics</strong> React.js</li>
<li><strong>Level</strong> Newbie</li>
<li><strong>Help, reactions etc...</strong> use #cwfpractice1 on Twitter</li>
<li><strong>Prerequisite knowledge</strong>
<ul>
<li>Javascript fondamentals (ES6)</li>
<li>React.js basics (<a href="https://facebook.github.io/react/docs/components-and-props.html" target="_blank" rel="external">Stateless &amp; Class-based components</a>, <a href="https://facebook.github.io/react/docs/state-and-lifecycle.html" target="_blank" rel="external">Dealing with state</a>)</li>
</ul>
</li>
</ul>
</div>
<!-- FIXME add Mastodon link? -->
<!-- add https://facebook.github.io/react/docs/components-and-props.html -->
<p>This first practice session will help you write simple React.js code that in a way that promotes reuse of components and ease of maintenance.</p>
<p>We will build a simple board with inplace editing that allows us to add elements in each column without page reloads.<br>
As far as the data to be represented, feel free to choose what you want. I chose to list some programming paradigms features. Here it goes:</p>
<p><img src="https://res.cloudinary.com/codewithflair/image/upload/cdf/2017-04-13/interactive-board-4" alt=""></p>
<a id="more"></a>
<h2 id="structuring-components"><a class="header-anchor" href="#structuring-components">#</a>Structuring components</h2>
<p>Before we get into coding, we need to think of a reasonable way to break down our UI into React components. I got started on the task for you and designed three different sketches that represent ways in which we could structure our interface.</p>
<section class="instructions">
<h2>Task 1</h2>
<p><strong>Consider the three following designs and mentally elect the one that you would favour using for the design of our interface. Different colours stand for diferent instances of React components. Dashed lines <code>---</code> stand for UI elements that are part of the rendering of a parent React component.<br>
ote: there may be more than one answer, just make sure you can justify your choice.</strong></p>
<figure class="fig-options">
  <div><img src="https://res.cloudinary.com/codewithflair/image/upload/l_text:Dosis_85_bold:A.,g_north_east,x_40,y_40,o_70/v1487914392/cdf/2017-04-13/sketch-header-component.jpg"></div>
  <div><img src="https://res.cloudinary.com/codewithflair/image/upload/l_text:Dosis_85_bold:B.,g_north_east,x_40,y_40,o_70/v1487914392/cdf/2017-04-13/sketch-monochrome.jpg"></div>
  <div><img src="https://res.cloudinary.com/codewithflair/image/upload/l_text:Dosis_85_bold:C.,g_north_east,x_40,y_40,o_70/v1487914392/cdf/2017-04-13/sketch-column-component.jpg"></div>
  <figcaption></figcaption>
</figure>
<details>
  <summary>Expand solution</summary>
<p>First, note that there could be several other good solutions to the problem above. What I want to emphasize is that it is a widespread practice among beginers to skip this design effort entirely and default to <code>B.</code>. While this may seem like a minimal approach (e.g. you need <em>only</em> one component), it will make any work on the components much harder down the road. Properly structuring your components and defining a logic for how they communicate with one another is the key to making your code maintainable and reusable.</p>
<p>Now, <code>A.</code> or <code>C.</code>?</p>
<p>In <code>C.</code>, the layout is expressed the layout as a combination of three components: <code>&lt;Column/&gt;</code>, <code>&lt;List/&gt;</code> and <code>&lt;Board/&gt;</code>.<br>
A Column is anything that has a header (e.g. « Programming paradigm features » or « Imperative » in the previous image) and a body (anything we want, including another column).</p>
<p>In <code>A.</code> we go ahead and create a <code>&lt;Header/&gt;</code> component instead, that we will render in <code>&lt;Board/&gt;</code> and in <code>&lt;List/&gt;</code>.</p>
<p>Now, one could argue for the one or the other. They both use 3 react components, 2 of which are used multiple times. <code>C.</code> has the advantage over <code>A.</code> of having to write the markup for the header only in one place (the <code>Column</code> component). The shallower encapsulation of components of solution <code>A.</code> could also be seen as an advantage.</p>
<p>I personally chose <code>C.</code>. Why? It came to my mind first and I didn't find that using <code>A.</code> would bring any valuable benefit. Feel free to stick with <code>A.</code> or any other design you favor over these. For example you could use a variant of <code>A.</code> where <code>&lt;Header/&gt;</code> is just a simple <code>&lt;p&gt;</code> or <code>&lt;h3&gt;</code> tag. You would then have only two React components, which might be just as arguable in this case.</p>
<p>In task 2 you will convert this conceptual mockup in stateless React code. Attempting to program by composing components and analysing the solution will help you get a feel of how much of an improvement that is over the « fit-all-into-one-component » approach.</p>
</details>
<hr>
<h4 id="à-propos"><a class="header-anchor" href="#à-propos">#</a>À propos</h4>
<p>Keeping our application tiny simplifies the work above. In richer applications, you might also want to create separate files/modules and define how they depend from one another.</p>
</section>
<h2 id="static-prototyping"><a class="header-anchor" href="#static-prototyping">#</a>Static prototyping</h2>
<p>Great, now that we defined our compontent structure, we can get into prototyping it with React. At this stage, we're only interested in integrating the layout into a hierarchy of React components that can render in the browser. This later will be the base on which we will enable user interaction by handling events and state.</p>
<section class="instructions">
<h2>Task 2</h2>
<p><strong>Implement a minimalist structure of React components for the design marked as <code>C.</code> in the previous task. Ignore the fact that the lists will be editable for now and have them contain a static list of items.<br>
By the end of this task the editor's live preview should like this:</strong></p>
<figure class="fig-options">
  <div><img src="http://res.cloudinary.com/codewithflair/image/upload/v1492227050/cdf/2017-04-13/screenshot.png"></div>
</figure>
<p>Note: I loaded some basic CSS so you can focus fully on the React code. Just apply the <code>.board</code> class to your wrapper Column component (e.g. <code>&lt;Column className=&quot;board&quot;&gt;</code>). You only need to edit code in the « JS » tab.</p>
<p><a class="jsbin-embed" href="http://jsbin.com/fodilik/embed?js,output" target="_blank" rel="external">JS Bin on jsbin.com</a><script src="http://static.jsbin.com/js/embed.min.js?3.41.10"></script></p>
<details><summary>Expand solution (~15 lines of code)</summary>
<p>Looking at our component structure from the previous task (version <code>C.</code>), it is clear that we need to implement three components: <code>Board</code>, <code>Column</code> and <code>List</code>.</p>
<p>Here is the resulting code:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">const List = () =&gt; &lt;ul&gt;</div><div class="line">                     &lt;li&gt;item 1&lt;/li&gt;</div><div class="line">                     &lt;li&gt;item 2&lt;/li&gt;</div><div class="line">                   &lt;/ul&gt;</div><div class="line">const Column = props =&gt; </div><div class="line">  &lt;div&gt;&lt;p&gt;&#123;props.header&#125;&lt;/p&gt;&#123;props.children&#125;&lt;/div&gt;</div><div class="line"></div><div class="line">const Board = () =&gt; </div><div class="line">  &lt;Column header="Title"&gt;</div><div class="line">    &lt;Column header="Column 1"&gt;&lt;List/&gt;&lt;/Column&gt;</div><div class="line">    &lt;Column header="Column 2"&gt;&lt;List/&gt;&lt;/Column&gt;</div><div class="line">    &lt;Column header="Column 3"&gt;&lt;List/&gt;&lt;/Column&gt;</div><div class="line">    &lt;Column header="Column 4"&gt;&lt;List/&gt;&lt;/Column&gt;</div><div class="line">  &lt;/Column&gt;;</div><div class="line"></div><div class="line">ReactDOM.render(&lt;Board/&gt;, document.getElementById("app"));</div></pre></td></tr></table></figure>
<p>An interesting aspect of version <code>C.</code> is that multiple instances of a Column are placed as the content for another Column in <code>Board</code>. Likewise <code>&lt;List/&gt;</code> is used as content for <code>&lt;Column/&gt;</code>. Both of these are possible thanks to our use of <code>{props.children}</code> in the <code>Column</code> function.</p>
<p>You can also observe that there is no need to use a <code>React.Component</code> class here, are we do not need to manage any state. Simple functions, or « Stateless components » in the React terminology, serve all of our needs at this stage.</p>
</details>
<hr>
<h4 id="à-propos-v2"><a class="header-anchor" href="#à-propos-v2">#</a>À propos</h4>
<ul>
<li>writing CSS at the static prototyping stage, before dealing with events and state, helps to structure styles according to the core elements of your interface, convieniently delaying the styling related to the nitty-gritty details of what changes on user interaction.</li>
<li>you could also have added the HTML for the input field at this step</li>
</ul>
</section>
<h2 id="events-and-state-fixme-and-lifecycle"><a class="header-anchor" href="#events-and-state-fixme-and-lifecycle">#</a>Events and state <!-- FIXME and LIFECYCLE --></h2>
<p>Great, now we have the main layout of our interface, and we can look into making the lists interactive. To do this, we will need a way for the different lists to keep and update a <em>state</em>.</p>
<section class="instructions">
<h2>Task 3</h2>
<p><strong>Make the lists editable so that the last element of each list will be rendered as an input field by default. Each entry will be persisted into a new <code>li</code> element upon press of the <code>Enter</code> key. The editor is preloaded with the recommended outcome from the previous task. Some changes and additions will be required.<br>
By the end of this task you should have a full-featured interactive board.</strong></p>
<details><summary>Hints</summary>
<ul>
<li>use a React.Component class.</li>
</ul>
<details><summary>More hints</summary>
<ul>
<li>If the method called by <code>onKeyPress</code> takes <code>event</code> as its argument, the initial element on which the event was triggered can be accessed with <code>event.target</code>.</li>
</ul>
<!--FIXMEdetails><summary>One last hint</summary>

- The lifecycle method ` ` can be used to trigger code that should be done ...
</details-->
</details>
</details>
<p><a class="jsbin-embed" href="http://jsbin.com/damarus/embed" target="_blank" rel="external">JS Bin on jsbin.com</a><script src="http://static.jsbin.com/js/embed.min.js?3.41.10"></script></p>
<details><summary>Expand solution</summary>
<p>Here is the full code of my solution. Your solution may be quite different and just as good (or better?). Read comments within and after the JSBin snippet for some insights.</p>
<p><a class="jsbin-embed" href="http://jsbin.com/mujuri/embed" target="_blank" rel="external">JS Bin on jsbin.com</a></p>
<script src="http://static.jsbin.com/js/embed.min.js?3.41.10"></script>
<p>If some of the things seem magic in here, the best place to look into is probably the <a href="https://facebook.github.io/react/docs/state-and-lifecycle.html" target="_blank" rel="external">State and lifecycle</a> chapter of the React documentation.</p>
<p>We use the List component <code>props</code> to initialise a state that will then be updated everytime we modify an input field rendered by this component. Changing the state with <code>setState</code> allows the List component to call <code>render</code>, hence updating the list of items generated by with the use of the <code>map</code> function.<br>
Note the need to bind the current <code>this</code> context to the method of the event handler in the constructor. This is due to the way javascript deals with inheritance. See <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/this" target="_blank" rel="external">this Mozilla Developer Network reference page </a> for more information on the topic.</p>
</details>
<hr>
<h4 id="à-propos-v3"><a class="header-anchor" href="#à-propos-v3">#</a>À propos</h4>
<p>State could be dealt with in several way. In this practice session, I chose to keep with React basics and managed the state directly within the List component. It works well for our app in regard of its size. In future practice, we will see how different patterns can be used for managing state (in React and beyond), notably by decoupling state from the components that use them.</p>
</section>
<p>Great! The practice is over. If you haven't checked my solutions already, you can walkthrough from the beginning and click the « Expand solution » folds for each of the task.</p>
<p>Also, if you'd like to get reactions on your code snippets or give any feedback on this post, use <code>#cwfpractice1</code> on Twitter (or flick me an email). You can expect more of these kinds of guided challenges in the future.<br>
I now leave you with a series of improvements you could bring to this project if you're willing to dig deeper.</p>
<h2 id="going-further"><a class="header-anchor" href="#going-further">#</a>Going further</h2>
<p>Want more ideas to keep practicing? Extend this project by allowing the user to:</p>
<ul>
<li>create new columns (e.g. by clicking a button)</li>
<li>edit existing list entries</li>
<li>move around an entry from a list to a different list</li>
</ul>
<!-- TODO
Great X! You completed all our tasks. You can now walkthrough from the beginning and compare your solution with the ones from the author.
Also, your work will now be available to others. Two other people completed this before you. Feel free to see their solutions and leave comments to start collaborating!

Don't want this to be public? Just tick the following box and you'll be covered.
Well done on the practice. A natural next step from here would be ......  FIXME
-->
]]></content>
    
    <summary type="html">
    
      &lt;!-- FIXME - link «enhanced» to an article explaining my approach to teaching via CWF --&gt;
&lt;p&gt;&lt;em&gt;This post is enhanced for web development practice. You can solve a given problem directly in your browser through a selection of iterative tasks. Advice: Unless otherwise stated, attempt all tasks before expanding any of the solutions.&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;summary&quot;&gt;
&lt;h4 id=&quot;practice-summary&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#practice-summary&quot;&gt;#&lt;/a&gt;Practice summary&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Topics&lt;/strong&gt; React.js&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Level&lt;/strong&gt; Newbie&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Help, reactions etc...&lt;/strong&gt; use #cwfpractice1 on Twitter&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prerequisite knowledge&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Javascript fondamentals (ES6)&lt;/li&gt;
&lt;li&gt;React.js basics (&lt;a href=&quot;https://facebook.github.io/react/docs/components-and-props.html&quot;&gt;Stateless &amp;amp; Class-based components&lt;/a&gt;, &lt;a href=&quot;https://facebook.github.io/react/docs/state-and-lifecycle.html&quot;&gt;Dealing with state&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!-- FIXME add Mastodon link? --&gt;
&lt;!-- add https://facebook.github.io/react/docs/components-and-props.html --&gt;
&lt;p&gt;This first practice session will help you write simple React.js code that in a way that promotes reuse of components and ease of maintenance.&lt;/p&gt;
&lt;p&gt;We will build a simple board with inplace editing that allows us to add elements in each column without page reloads.&lt;br&gt;
As far as the data to be represented, feel free to choose what you want. I chose to list some programming paradigms features. Here it goes:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/codewithflair/image/upload/cdf/2017-04-13/interactive-board-4&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Iterate hackerspace - the birth of a resilient tech community</title>
    <link href="http://codewithflair.org/Iterate-hackerspace-the-birth-of-a-resilient-tech-community/"/>
    <id>http://codewithflair.org/Iterate-hackerspace-the-birth-of-a-resilient-tech-community/</id>
    <published>2017-02-15T04:05:30.000Z</published>
    <updated>2017-03-02T09:38:30.190Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>Travelling</strong> (<em>noun. countable.</em>): Process of intentionnaly integrating unfamiliar environments to further one's understanding of All.</p>
</blockquote>
<p>That would probably be one of the few definitions I'd give to this word, depending on the context. It matches how I feel about the <a href="/From-free-roaming-to-discipline/" title="eastward journey from France">eastward journey from France</a> that I brought to an end last month.<br>
Today I want pay a tribute to the community in which I spent the most time during that journey. They helped me figure what I can do for people, where it is I can bring value.</p>
<a id="more"></a>
<p>When I arrived in Armenia and searched for « Hackerspace Yerevan » on the Web, no obvious result appeared in the first place, except a page on someone's personal site saying that they were looking into creating such a space and were looking for opportunities and people to join. That person was Edgar Aroutiounian. After he offered me to crash at his place a couple of nights, things quickly became very exciting. He hailed from San Francisco, and I could feel that he had very strong professional ethics. I remember Edgar asking me what work I was doing and me answering &quot;Web development&quot;. Then he asked something like « Do you do it for real? Professionally? » and I answered defensively « Yeah, of course, I do it for like 10 years now! ». This was me helplessly trying to convince myself... I had started to code 10 years earlier, yet I was nowhere nearly as experienced as I'd wished, and though I worked in a few companies and taught before, I had never really fully committed to become a professional software engineer.</p>
<p>Edgar had just visited the space that had offered to host the hackerspace, and it was nothing like the grungy basement for nerds that I had in mind. IBM's Innovative Solution &amp; Technologies Center (ISTC) was just about to launch, and promising to become the go-to place for co-working and entrepreuneurs in Yerevan. Even better, they would provide latest hardware, help with comms and more. How cool!</p>
<h2 id="where-tech-communities-matter"><a class="header-anchor" href="#where-tech-communities-matter">#</a>Where tech communities matter</h2>
<p>I don't know much of the of the story that made Armenia what it is today. Some parts of it show in the architecture, some show via the spoken and written languages, the plentiful traditions, the music, the crafts people keep making... However, beyond the cultural wealth of the country, the political, social and economical situations seem tough. I met kids who'd had to work for their families instead of going to school, fathers who'd had to spend most of their time far from home (e.g. in Russia) to make proper income and people who had to come all the way from Մեղրի (Meghri - far south Armenia) to Երևան (Yerevan - the capital), to get decent (?) medical treatment. Most strikingly, I met kids aged 17 who were amazingly brillant developers, and yet will have to put their dreams aside turned 18 to join the army and likely be brought to the most disturbed area of the armed conflict with Azerbaijan, to defend their country.</p>
<p>Edgar told me the day we met « I'm here to help ». I wasn't quite sure what he meant back then. Yet soon after starting to work with him, I was literally amazed. His confidence and « let's get started » attitude just made things come true. He lead open workshops from day one, teaching the skills the youth of Armenia needs to become professional programmers.<br>
Every day more people where coming to learn modern Javascript, Linux, Computer Science Theory and more. In less that a week we had over thirty people showing up, and even better, the same people kept coming!</p>
<figure>
  <img src="https://res.cloudinary.com/codewithflair/image/upload/e_brightness:35/e_contrast:-50/v1487914180//cdf/2017-02-15/iterate-workshop_h3p1zc.jpg">
  <figcaption>Our first workshop!</figcaption>
</figure>
<p>A community of programmers was born, in a place of where it can have genuine social impact. And even better, it had developed habits to support collaboration, and help members become independent learners.</p>
<h2 id="the-rise-of-autonomous-changemakers"><a class="header-anchor" href="#the-rise-of-autonomous-changemakers">#</a>The rise of autonomous changemakers</h2>
<p>In <a href="http://iteratehackerspace.com" target="_blank" rel="external">Iterate</a>, everyone is seen as a fellow contributor rather than a teacher or student. Each person is encouraged to contribute to any of our open-source projects, regardless of their proficiency. Workshops are code jams, were people chime in with one another to build something. It is a common pattern to see five or six people around one computer, on which something particularily exciting is happening. Review nights, as promoted by Edgar, help people check how good they become at tackling simple problems in a short amount of time. Here is an example of one he wrote a while back:</p>
<figure>
  <img src="https://res.cloudinary.com/codewithflair/image/upload/v1487912969/cdf/2017-02-15/problem-on-whiteboard.jpg">
  <figcaption>Challenge for one of our review nights</figcaption>
</figure>
<p>These small challenges help you measure how much of a specific topic you retained as skills, while helping to gain confidence, and building portfolios ready for potential employers. They help constantly push learners at the edge of their skillset, and expand it.</p>
<p>When asked for something, Edgar would look around the room and find some other contributor that was just one step ahead and suggest them to pair with whoever was stuck.</p>
<p>He would encourage people to try and fail first, before looking for answers. In this culture, people in-the-know have the responsibility to look after the ones who struggle the most and nudge them towards the path that will help them understand by themselves. This often means refraining from giving answers. Each problem-solving experience is valued as a unique opportunity to learn something greater than just the solution to the problem. They are proxies to developing autonomous learning. By learning how to learn and how to work with others in addition to how to code, people from Iterate have all they need to start prototype their ideas into real-world ventures that address the issues <em>they</em> care about.</p>
<h2 id="joining-the-dots"><a class="header-anchor" href="#joining-the-dots">#</a>Joining the dots</h2>
<p>There would be much more to say about how learning is happening in this community. The horizontal, decentralized approach I chose to focus on here was not the only one. Edgar and I were also teaching some of the same people in a more traditional format as part of a study program conducted by the ISTC. Having only classes would hardly ever have created community bounds in the way that the collective learning taking place in Iterate did. It would also not promote such a learning-by-failing approach that I believe is key to develop resilience.</p>
<p>Another thing I observed is that we learners seem to get higher motivation when:</p>
<ul>
<li>groups are formed spontaneously as the result of a need that emerged organically around a shared purpose, as opposed to a study project anticipated by the « teacher »</li>
<li>new knowledge is brought in as a way to fix tangible issues with a current product/project as opposed to simply gaining proficiency with tech X</li>
<li>the design of the product is a collective effort, giving group members a sense of co-ownership</li>
</ul>
<p>These, along with Edgar's approach to teaching, are takeaways that I will bring to other communities of learners. I feel priviledged to have had the opportunity to gain them. Being around other developers helped me realize how important it is for me to keep learning and teaching on a daily basis, and I am now focusing on bringing more of this into my life.</p>
<p>You can follow the projects that people from Iterate are developing <a href="https://github.com/iteratehackerspace" target="_blank" rel="external">on Github</a>. Technologies include Node.js, React, React Native and more. Oh, and surely let us know if you are looking for junior developers for this kind of work (your team should also have seniors willing to mentor).</p>
<p>That's it for now, if you have comments, just reach to @niwolive on Twitter.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Travelling&lt;/strong&gt; (&lt;em&gt;noun. countable.&lt;/em&gt;): Process of intentionnaly integrating unfamiliar environments to further one&#39;s understanding of All.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That would probably be one of the few definitions I&#39;d give to this word, depending on the context. It matches how I feel about the &lt;a href=&quot;/From-free-roaming-to-discipline/&quot; title=&quot;eastward journey from France&quot;&gt;eastward journey from France&lt;/a&gt; that I brought to an end last month.&lt;br&gt;
Today I want pay a tribute to the community in which I spent the most time during that journey. They helped me figure what I can do for people, where it is I can bring value.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>From free roaming to discipline</title>
    <link href="http://codewithflair.org/From-free-roaming-to-discipline/"/>
    <id>http://codewithflair.org/From-free-roaming-to-discipline/</id>
    <published>2017-02-06T03:30:25.000Z</published>
    <updated>2017-03-02T09:42:26.724Z</updated>
    
    <content type="html"><![CDATA[<p><em>To the students in ISTC, Yerevan, Armenia, and people from the <a href="https://iteratehackerspace.com" target="_blank" rel="external">Iterate hackerspace</a>. To Edgar, our mentor. To Sindu, my apprentice. And to aspiring sailor-developers pondering on how to set sail</em>.</p>
<p>2016 was the year I caught my bearings. Not specifically through waters, though they were definitely involved when I paddled down the Danube on my eastward journey overland from France.</p>
<figure>
  <img src="https://res.cloudinary.com/codewithflair/image/upload/v1487914392/cdf/2017-02-06/kayak-trip.jpg">
  <figcaption>Dusk paddling with Jumbo the Kayak on our way from Budapest to Belgrade</figcaption>
</figure>
<p>Early that year, my ambition was to learn to work as a developer while travelling.<a id="more"></a> Most of all code I was writing was a webshop for <a href="http://tealure.com" target="_blank" rel="external">Tealure</a>, back then on Ruby on Rails + AngularJS. It had been about 3 years I'd gotten my MSc in Software Engineering, yet I often felt underqualified and the time I spent programming was not that fun.</p>
<p>Way too often I faced issues I didn't know how to solve, and it repeatedly happened than a week or more would pass by without I could find a solution.<br>
I was overwhelemed with feature requests and bugs and was constantly hitting walls because of using  tools that I knew too little about. AngularJS for one, but also Javascript, the language. More importantly I was also lacking a sense of purpose, a learning path, and a systemic problem-solving approach better than « just Google it up and see what others do ».<br>
I seemed doomed to stumble upon each little gravel on the way, and was paralised by the multiplicity of domains I'd need to improve at to do my job productively (backend, frontend, devops, SEO...).</p>
<p>We had just taken an intern to assist me in the works, but clearly, I was lacking a fair amount of capacity and confidence to stretch to mentoring while my partner and founder Ernestas Klevas was dreaming big on the next steps for having our tea reach more hands and help more people grow crops in Nepal with our cooperative.</p>
<p>In parallel to this I was also investing time to build my own freelance venture from the ground up. I was believing that, with a bit of commitment and consistency I could totally work 10-15 hours a week on some hourly-contracts (which I would surely find on the way), and that it would cover my monthly expenses while paying back my student loan.</p>
<p>Even before I went onto the Danube, little of my time in cities went into productive work. I was quite busy maintaining the frugality of the lifestyle I used to favor: sleeping in public parks, gathering free food from farmers markets and bakeries, mapping the most reliable public Wifi around, charging my electronic devices with a solar panel when the sun was out... This lifestyle had many aspects I enjoyed, but it was distraction-prone by design, and I required too much day-to-day practical thinking to productively dive into whatever work I wished got done.</p>
<figure>
  <img src="https://res.cloudinary.com/codewithflair/image/upload/v1487914872/cdf/2017-02-06/vagabond-surfing.jpg">
  <figcaption>Working in the staircase above Budapest's main farmer's market...</figcaption>
</figure>
<p>I was so <em>naively</em> confident that productivity would come in due time, that I planned holidays with my peers early in the journey, and as I was running late to meet them in Blugaria, I decided not to work until my Kayak trip would be over.</p>
<h1 id="non-anticipated-encounters"><a class="header-anchor" href="#non-anticipated-encounters">#</a>Non-anticipated encounters</h1>
<p>Serbia struck me in many ways. It was the first country I visited that had a strong contrast with EU countries. When I was still paddling towards Belgrade, fishermen were very prone to smile at me, and people would often shout out for a visit at their summer shacks. I got hosted, fed, and dressed by hospitable serbs who offered me comfort at the toughest times.<br>
In contrast, Belgrade also taught me that living like a vagabond can indeed have undesirable side-effects - some people <em>do</em> shake you up in the middle of your peaceful night in the park, and will use <em>whatever works</em> to get what they value, even if that's 2 euros and a 4-years-old pair of shoes...</p>
<p>It's at about this time I realized I would need more stability and predictability if I was to make a living while travelling. I adopted the habit of going to the gamers club, a cheap place where I could hook up a screen to my nomad-friendly computer, for which my partner <a href="https://en.pinkoi.com/store/foufouzi" target="_blank" rel="external">Yi Chen Z</a> had crafted a super nice case &lt;3!</p>
<figure>
  <img src="http://res.cloudinary.com/codewithflair/image/upload/v1487914391/cdf/2017-02-06/odroid-c2.jpg">
  <figcaption>Hardkernel's Odroid C2 is pocket-sized and does all I need!</figcaption>
</figure>
<p>By the time I was to leave Serbia, my fidelity to the gamers club allowed me to act upon the best realization I had while Kayaking. I needed a break from doing web development and maintenance for Tealure. I moved our webshop from a custom Rails + AngularJS stack to a SAAS plateform (namely Smoolis) who'd handle most of the devops, product development, maintenance and still meet our requirements. The best part was that it actually cut the running costs to a third! At a stage where our sales didn't allow to pay for the Heroku Postgres monthly fee alone, this decision had benefits on all levels.</p>
<p>Yet there still was no paid gig on the horizon, and I was acutely aware that I'd need to fix my finances pretty soon. By then, I knew I was not going to be productive unless I had a reliable place to work from, and that this should not change too often. After some epic hiking and cycling in Bulgaria and Turkey with my peers, I decided to go towards Armenia as fast as affordable buses and hitch-hiking would allow. My idea was to settle down for a few weeks do freelance work in a place where food and accommodation would be cost-effective.</p>
<h2 id="armenia-the-turning-point"><a class="header-anchor" href="#armenia-the-turning-point">#</a>Armenia, the turning point</h2>
<p>Armenia is where I met Edgar Aroutiounian, whom I've been assisting at getting a hackerspace going in Yerevan. This deserves <a href="/Iterate-hackerspace-the-birth-of-a-resilient-tech-community/" title="a story on its own">a story on its own</a>. This is also a land where I felt welcome and comfortable from day one. A few days after arrival, I somewhat magically stumbled upon <a href="http://goodgirlgonenomad.com/armenia-yerevan-and-travel-buddies/" target="_blank" rel="external">the blog article</a> of a japanese nomad girl who mentioned a grandmother's place that turned into a guesthouse, and it seemed to even beat the high hospitality and afordability standards that I had. After she sent me a few pictures from instructions written in a Notebook (in Japanese), I eventually found the place, and Lida.</p>
<figure>
  <img src="http://res.cloudinary.com/codewithflair/image/upload/v1487914391/cdf/2017-02-06/lida.jpg">
  <figcaption>Lida, wipping the wool she would later turn into knitting yarn</figcaption>
</figure>
<p>Her place was the perfect environment for me to take a break from journeying. Uncluttered, simple.  Kept lively by the few occasional travellers, but mostly by her two grandsons in their early teens. I lived in her basement. I do believe that lacking access to a shower and washing my clothes by hand every week helped me appreciate things that I'd otherwise had taken for granted. Though we didn't speak a language in common, wisdom was shining through the way she raised her grandchildren, how she recieved her neighbours to advice or comfort them, the way she kept talking to me in Russian and Armenian, assured that the tone and non-verbal expressions she used would carry meaning beyond that of words, which would leave me with a good-enough <em>feel</em> - if not <em>understanding</em> - of what she meant.</p>
<p>But above all, what Lida demonstrated on a daily basis was something I lacked so much all these years. Discipline. She acted consistently with assurance and upon deeply ingrained knowledge.</p>
<p>I don't know how she learned to do so, but seing this in her brought me back to a feeling of the past - a need for some kind of guidance to help me sense what I ought to be doing with this life. Living half a year in an Ashram a year earlier had brought me some methods to seek for these answers, as well as more tolerance and open-mindedness, especially in regards to accepting there might not be one Truth on anything, but rather complementing perspectives, some of which rational, other esoteric, but none worthier than any another in the togetherness of All. Still, the path ahead was windy,<br>
there seem to constantly be a turn right ahead, and a great unknown after that.</p>
<h2 id="two-resources-that-helped"><a class="header-anchor" href="#two-resources-that-helped">#</a>Two resources that helped</h2>
<p>This brought me to try a mobile app called « The Fabulous ». It brings together learnings from different fields of psychology with teachings from various spiritual movements to help you feel content with your life. You chose from a catalog of « journeys » based on what area you'd like to improve in your life and the app will help you by giving you challenges to overcome everyday, most of which you'll have to repeat several days in a row to complete. The idea is to help you develop habits that make you feel good and achieve more of the things that genuinely matter to you whilst giving up the things that hold you back. The two journeys I followed aimed to make you « feel energized » and « strengthen your self-control ». I was very perplex when I started out, and sometimes thought that the stories they were sharing gave an over-simplistic picture of common problems, and that the solutions might not apply to me. However, by keeping the commitment, I gradually learned that it was not so much about how good was the app, but rather how good I was at using the advices from the app in a way that would support my wellbeing. And for me, that worked pretty well. I developped different kinds of « rituals » throughout the day based on the knowledged shared and what I wanted to achieve, and that helped me bring consistency to my schedule. I also learned a bunch about humman psychology in the process and how tools like « commitment devices », « performance statements », and « visual rehersals » can help pre-condition your mind and affect how you might react to any specific situation.</p>
<p>During that time in Armenia, I was also reading <em>Soft Skills</em> by Jason Sonmez. This is a book on which I have mixed opinions, but which boosted my productivity and helped me develop my own system for organizing my work along different cycles matching different level of granularity of goals that I set to myself. It is targetted specifically to software developers and covers many non-tech topics ranging from marketting to spirituality or fitness. While the author gives more importance to performance, competition, physical considerations and being wealthy than I'd wish he did, I found that many of his advices were to the point in areas such as organizing your work, starting out as an entrepreneur and embracing a mindset that supports feeling good with whatever you do (or don't). He also convinced me to give a proper try to the Pomodoro technique, mostly by emphasising how impactful it is to have a unit to track (and predict) how much time will go into different tasks (I now do it for 3 months and agree there).</p>
<p>During my 4 months in Armenia, it slowly dawned on me that the overland trip to Taiwan would have to be cancelled as I just wouldn't be able to pay back the loan and keep travelling in the same time. It surely didn't feel good when I realised that, but I found peace with going with the best alternative, which was to <em>fly</em> to Taiwan and join my partner there. She had been waiting for a while already, and a bit of stability and togetherness wouldn't hurt for sure. I'm now focusing on exploring the tech community here and further specialising my work before selecting some freelance work. It also had been a while I heard of a cool community named <a href="http://g0v.asia/" target="_blank" rel="external">g0v</a>. They are working on civic-tech, empowering individuals to achieve what matters to them and society. Could be something worthwile to contribute to.</p>
<p>That was the story. If you have any comments or want to reach to me, I'm @niwolive on Twitter.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;To the students in ISTC, Yerevan, Armenia, and people from the &lt;a href=&quot;https://iteratehackerspace.com&quot;&gt;Iterate hackerspace&lt;/a&gt;. To Edgar, our mentor. To Sindu, my apprentice. And to aspiring sailor-developers pondering on how to set sail&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;2016 was the year I caught my bearings. Not specifically through waters, though they were definitely involved when I paddled down the Danube on my eastward journey overland from France.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://res.cloudinary.com/codewithflair/image/upload/v1487914392/cdf/2017-02-06/kayak-trip.jpg&quot; /&gt;
  &lt;figcaption&gt;Dusk paddling with Jumbo the Kayak on our way from Budapest to Belgrade&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Early that year, my ambition was to learn to work as a developer while travelling.
    
    </summary>
    
    
  </entry>
  
</feed>
